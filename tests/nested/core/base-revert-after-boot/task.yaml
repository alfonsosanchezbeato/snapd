summary: Check that a base can be reverted after it has booted

details: |
  This test checks that a base snap that has not finished installation but
  that already booted can be reverted properly if something else fails, like a
  post-refresh hook.

# this is a UC20+ specific test
systems: [ubuntu-20.04-64, ubuntu-22.04-64]

execute: |
  echo "Build base with failing post-refresh hook"
  VERSION="$(tests.nested show version)"
  base=core"$VERSION"
  rm -rf "$base"  
  snap download --basename="$base" "$base"
  unsquashfs -d "$base" "$base".snap
  HOOKS_D=$base/meta/hooks/
  POST_REFRESH_P=$HOOKS_D/post-refresh
  mkdir -p "$HOOKS_D"
  # Note that actually the hook will not find bash and will fail with:
  # ERROR run hook "post-refresh": cannot locate base snap core: No such file or directory
  # but that is enough for the test to make sense
  # TODO find out why
  cat > "$POST_REFRESH_P" << EOF
  \#!/bin/bash -ex
  exit 1
  EOF
  chmod +x "$POST_REFRESH_P"
  snap pack "$base"/ --filename="$base"_badhook.snap

  echo "Wait for the system to be seeded first"
  tests.nested exec "sudo snap wait system seed.loaded"

  boot_id="$(tests.nested boot-id)"

  echo "Install base with failing post-refresh hook"
  tests.nested copy "$base"_badhook.snap
  chg_id=$(tests.nested exec "sudo snap install --dangerous --no-wait ./${base}_badhook.snap")

  echo "Wait for reboot"
  tests.nested wait-for reboot "$boot_id"

  boot_id="$(tests.nested boot-id)"
  echo "Wait for second reboot after post-refresh hook failure"
  tests.nested wait-for reboot "$boot_id"

  boot_id="$(tests.nested boot-id)"
  # wait for change to finish with error
  not tests.nested exec sudo snap watch "$chg_id"
  # make sure that no additional reboots have happened while the change finished
  test "$boot_id" = "$(tests.nested boot-id)"

  echo "Check that change finished with failure and that the old snap is being used"
  tests.nested exec "snap info $base | MATCH 'installed:.*\(x1\)'"
  tests.nested exec "snap changes | MATCH \"^$chg_id.*Error\""
  modeenv_data=$(tests.nested exec 'cat /var/lib/snapd/modeenv')
  if ! [[ "$modeenv_data" == *base=${base}_x1.snap* ]]; then
      echo "Incorrect base in modeenv: $modeenv_data"
      exit 1
  fi
  if [[ "$modeenv_data" == *try_base=* ]]; then
      echo "try_base should not be set in modeenv: $modeenv_data"
      exit 1
  fi
  if [[ "$modeenv_data" == *base_status=* ]]; then
      echo "base_status should not be set in modeenv: $modeenv_data"
      exit 1
  fi
