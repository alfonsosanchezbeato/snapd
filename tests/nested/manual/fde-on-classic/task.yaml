summary: Check that a FDE based classic image can be booted

details: |
  This test creates a classic image that looks like what the installer
  would create and we boot into it.

systems: [ubuntu-22.04-64]

environment:
  NESTED_ENABLE_SECURE_BOOT: false
  NESTED_USE_CLOUD_INIT: true
  CACHE_D: ./cache

prepare: |
  # create an image that looks like a classic image
  # Note that "mk-image" is left as a script so that it can also be
  # run outside of spread easily for quick interactive testing
  ./mk-image.sh ./boot.img "$CACHE_D"
  # replaces snap-bootstrap in initramfs and snapd in rootfs
  # TODO chroot install of deb? /home/gopath/src/github.com/snapcore/snapd_*_amd64.deb
  ./replace-image-files.sh ./boot.img "$CACHE_D"

execute: |
  #shellcheck source=tests/lib/nested.sh
  . "$TESTSLIB/nested.sh"
  # run built image
  nested_start_core_vm_unit "$PWD"/boot.img
  # modify&repack snaps that we will refresh in the image
  sed -i 's/This program cannot be run in DOS mode/This program cannot be run in XXX mode/' \
      "$CACHE_D"/snap-pc-kernel/kernel.efi
  snap pack --filename=pc-kernel-new.snap "$CACHE_D"/snap-pc-kernel

  # validate that the image boots and seeds
  tests.nested exec "sudo snap wait system seed.loaded"

  tests.nested exec 'cat /etc/os-release | MATCH VERSION_ID=\"22.04\"'
  tests.nested exec "snap list pc-kernel"
  tests.nested exec "snap list pc"
  tests.nested exec "snap list core22"
  tests.nested exec "snap list snapd"

  # refresh kernel snap
  printf "Test refreshing the kernel snap\n"
  tests.nested copy pc-kernel-new.snap
  boot_id=$(tests.nested boot-id)
  REMOTE_CHG_ID=$(tests.nested exec sudo snap install --dangerous pc-kernel-new.snap --no-wait)
  # Wait until we stall in the connection of interface as we wait for a reboot
  retry --wait 1 -n 60 sh -c "tests.nested exec \"snap change $REMOTE_CHG_ID | grep -E 'Doing .*Automatically connect eligible plugs and slots of snap'\""
  # Check that no reboot has been scheduled, then force a reboot
  not test -f /run/systemd/shutdown/scheduled
  tests.nested exec sudo reboot || true
  tests.nested wait-for reboot "$boot_id"
  tests.nested exec sudo snap watch "$REMOTE_CHG_ID"
  tests.nested exec sudo grep -q -a '"This program cannot be run in XXX mode"' /boot/grub/kernel.efi

  rm -rf "$CACHE_D"
